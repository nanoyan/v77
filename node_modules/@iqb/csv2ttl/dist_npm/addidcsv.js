#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RandExp = require("randexp");
var fs = require("fs");
var config_file_factory_1 = require("./config-file.factory");
var csv_factory_1 = require("./csv.factory");
// const fs = require('fs');
require('fs');
var dataFolder = '.';
if (process.argv[2]) {
    dataFolder = "".concat(dataFolder, "/").concat(process.argv[2]);
}
var configData = config_file_factory_1.ConfigFileFactory.load(dataFolder);
if (configData) {
    // Read the JSON configuration file
    var fileList_1 = {};
    var csvDelimiter_1 = configData.csv_delimiter || ';';
    var idPattern_1 = configData.idPattern || '^[abcdefghprqstuvxyz][2345679][abcdefghprqstuvxyz]$';
    fs.readdirSync(dataFolder).forEach(function (file) {
        fileList_1[file.toUpperCase()] = "".concat(dataFolder, "/").concat(file);
    });
    // add id if it does not exist
    var fileOkCount_1 = 0;
    var fileAnalysedCount_1 = 0;
    var idsAddedCount_1 = 0;
    configData.vocabularies.forEach(function (voc) {
        var vocFilename = fileList_1[config_file_factory_1.ConfigFileFactory.getFilenameSource(voc).toUpperCase()];
        if (vocFilename) {
            var csvData = csv_factory_1.CsvFactory.load(vocFilename, csvDelimiter_1, true);
            if (csvData) {
                fileAnalysedCount_1 += 1;
                var idList_1 = csvData.map(function (c) { return c.id; }).filter(function (c) { return c && c.length > 0; });
                if (idList_1.length !== csvData.length) {
                    csvData.forEach(function (c) {
                        while (!(c && c.id.length > 0)) {
                            var randexp = new RandExp(idPattern_1);
                            var newId = randexp.gen();
                            if (!idList_1.includes(newId)) {
                                c.id = newId;
                                idList_1.push(newId);
                                idsAddedCount_1 += 1;
                            }
                        }
                    });
                    if (csv_factory_1.CsvFactory.write(vocFilename, csvData, csvDelimiter_1)) {
                        fileOkCount_1 += 1;
                    }
                }
            }
            else {
                console.log("\u001B[0;33mWARNING\u001B[0m Errors in file '".concat(vocFilename, "' - ignore"));
            }
        }
        else {
            console.log("\u001B[0;33mWARNING\u001B[0m File for '".concat(voc.id, "' not found - ignore"));
        }
    });
    if (fileOkCount_1 > 0) {
        console.log("".concat(idsAddedCount_1, " ID(s) changed in ").concat(fileOkCount_1, " of ").concat(fileAnalysedCount_1, " file(s)"));
    }
    else {
        console.log("no missing IDs in ".concat(fileAnalysedCount_1, " data file(s) - no changes"));
    }
}
//# sourceMappingURL=addidcsv.js.map